#!/bin/bash

# Distroboxes

dbox_create() {
    if ! distrobox list | grep "$1" &> /dev/null
    then
        distrobox create --name "$1" -i archlinux:latest
    fi
}

cntr_desktop=desktop-tools
dbox_create $cntr_desktop

cntr_devtools=devtools
dbox_create $cntr_devtools

# Fedora Packages


rpm_install() {
    local bin_name="${2:-$1}"
    if ! command -v "$bin_name" &> /dev/null
    then
        rpm-ostree install "$1"
    fi
}

add_package_repo() {
    local repo_file="/etc/yum.repos.d/$1";
    if [ ! -f "$repo_file" ]
    then
        sudo curl "$2" --output "$repo_file"
    fi
}

rpm_install awesome
rpm_install kitty
rpm_install rofi
rpm_install emacs
rpm_install flameshot
rpm_install fzf
rpm_install httpie http
rpm_install direnv
rpm_install dunst
rpm_install zoxide
rpm_install podman-compose
rpm_install polybar
rpm_install tldr

add_package_repo hashicorp.repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo
rpm_install packer

add_package_repo tailscale.repo https://pkgs.tailscale.com/unstable/fedora/tailscale.repo
rpm_install tailscale

enable_systemd_service() {
    if [ -f "/usr/lib/systemd/system/$1.service" ]
    then
        sudo systemctl enable --now $1
    fi
}

enable_systemd_service tailscaled

# Enable and start tailscaled
#sudo systemctl enable --now tailscaled
# Start Tailscale!
# sudo tailscale up

if ! command -v zsh &> /dev/null
then
    rpm-ostree install zsh zsh-autosuggestions zsh-syntax-highlighting
fi

# NVIDIA
# https://docs.fedoraproject.org/en-US/quick-docs/set-nvidia-as-primary-gpu-on-optimus-based-laptops/
# rpm-ostree install akmod-nvidia
# sudo akmods --force
# opening Nvidia settings should show a bunch of relevant info
# glxinfo | grep "OpenGL"
# OpenGL vendor string: NVIDIA Corporation


# https://universal-blue.org/images/nvidia/
# rpm-ostree kargs \
#     --append=rd.driver.blacklist=nouveau \
#     --append=modprobe.blacklist=nouveau \
#     --append=nvidia-drm.modeset=1
#
# See https://universal-blue.org/images/nvidia/#video-playback

## Shell #######################################################################

# set zsh as shell
if ! grep "$USER" < "/etc/passwd" | grep zsh &> /dev/null
then
    echo "change shell to /bin/zsh"
    sudo lchsh "$USER"
fi

## Fonts #######################################################################

if [ ! -d /usr/share/fonts/jetbrains-mono-fonts ]
then
    # system fonts are in /usr/share/fonts
    rpm-ostree install jetbrains-mono-fonts
    # emacs font cache may have to be busted after this, try sudo fc-cache -rv
    # https://www.reddit.com/r/emacs/comments/iermhs/emacs_fails_to_start_on_font_issue_even_after/
    systemctl reboot
fi

mkdir -p ~/.fonts

if [ ! -f ~/.fonts/feather.ttf ]
then
    #
    #fc-list | grep feather
    # this doesn't work, you need a personal access token to download it
    # curl https://github.com/adi1090x/polybar-themes/raw/master/fonts/panels/icomoon_feather.ttf -o ~/.fonts/TTF/feather.ttf
    echo "Go to https://github.com/adi1090x/polybar-themes/raw/master/fonts/panels/icomoon_feather.ttf in your browser and save to ~/.fonts/feather.ttf"
    echo "then reload with fc-cache -rv | grep home"
fi


if [ ! -f ~/.ssh/config ]
then
    echo "generate new ssh key or copy from existing machine"
    echo "scp -r <old-machine>:~/.ssh ~/.ssh"
    exit 1
fi

# distroboxes


distrobox-enter -n $cntr_desktop -e ~/.config/distrobox/desktop-tools-bootstrap.sh
distrobox-enter -n $cntr_devtools -e ~/.config/distrobox/devtools-bootstrap.sh
#dbox_install ripgrep $cntr_devtools rg
# TODO add fasd to desktop tools

# dotfiles

chez_local=~/.local/share/chezmoi
chez_remote_ssh=git@github.com:AdamFrey/dotfiles.git
if ! ls $chez_local/*dot_config* &> /dev/null
then
    rm -rf $chez_local
    git clone $chez_remote_ssh $chez_local
    chezmoi update

    echo "chezmoi init"
fi

rm -rf ~/.emacs.d

if ! grep "Doom Emacs" < ~/.config/emacs/README.md &> /dev/null
then    
    git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
    ~/.config/emacs/bin/doom install
fi

# flatpaks

flatpak_i () {
    if ! flatpak info "$1" &> /dev/null
    then
        flatpak install flathub "$1"
    fi
}

flatpak_rm () {
    if flatpak info "$1" &> /dev/null
    then
        flatpak uninstall "$1"
    fi
}

symlink () {
    if [ ! -e "$2" ]
    then
        ln -s "$1" "$2"
    fi
}

# https://github.com/flatpak/flatpak/issues/3787#issuecomment-1044677820
# TODO get this working
mkdir -p ~/.var/app/com.slack.Slack/config/gtk-3.0
cp -u /home/adam/.config/gtk-3.0/settings.ini ~/.var/app/com.slack.Slack/config/gtk-3.0/settings.ini &> /dev/null
mkdir -p ~/.var/app/org.mozilla.firefox/config/gtk-3.0
cp -u /home/adam/.config/gtk-3.0/settings.ini ~/.var/app/org.mozilla.firefox/config/gtk-3.0/settings.ini &> /dev/null
flatpak_i com.bitwarden.desktop
flatpak_i com.todoist.Todoist
flatpak_i org.zealdocs.Zeal
flatpak_i io.podman_desktop.PodmanDesktop
flatpak_i org.denemo.Denemo

xdg-settings set default-web-browser org.mozilla.firefox.desktop

# Systemd services

systemctl enable --user emacs

webpaks=(
    "com.google.Chrome"
    "com.spotify.Client"
    "org.mozilla.firefox"
    "fi.skyjake.Lagrange"
    "com.slack.Slack"
    "com.valvesoftware.Steam"
    "us.zoom.Zoom"
)

# In order to share your screen in Zoom, toggle D-bus session bus in Flatseal for Zoom

if [ "$1" = "--no-web" ]; then
    for pak in "${webpaks[@]}"; do
        flatpak_rm "$pak"
    done
else
    for pak in "${webpaks[@]}"; do
        flatpak_i "$pak"
    done
fi


# Folders

rmdir ~/Desktop &> /dev/null
rmdir ~/Documents &> /dev/null
rmdir ~/Downloads &> /dev/null
rmdir ~/Music &> /dev/null
rmdir ~/Pictures &> /dev/null
rmdir ~/Public &> /dev/null
rmdir ~/Templates &> /dev/null
rmdir ~/Videos &> /dev/null

mkdir -p ~/inbox

if [ ! -d /mnt/hdd1 ];
then
   sudo mkdir -p /mnt/hdd1
fi

if [ ! -e ~/archive ]
then
    ln -s /mnt/hdd1/archive /home/adam/archive
fi

# auto mount HDD on boot
# sudo blkid /dev/sda1
# sudo nano /etc/fstab
# UUID=your-uuid /mnt/hdd1 ext4 defaults 0 0


# Immich Photos ###############################

mkdir -p ~/.local/share/immich
# https://immich.app/docs/install/docker-compose


# Debugging ###################################

# from clj goes fast tutorial
#sudo sysctl -w kernel.perf_event_paranoid=1
#sudo sysctl -w kernel.kptr_restrict=0

# Limits ##################################

if [ "256" != $(sysctl -n fs.inotify.max_user_instances) ]
then
    sudo sysctl -w fs.inotify.max_user_instances=256
fi
