if [ -f ~/.config/sh/shellrc ]
then
  source ~/.config/sh/shellrc
fi


# this one is just on my old machine
if [ -f ~/.config/shell/shellrc ]
then
  source ~/.config/shell/shellrc
fi

# allows parameter expansion in prompts
setopt prompt_subst

function set_prompt() {
  # TODO figure out how to concatenate a local variable
  if [[ -v CONTAINER_ID ]]
  then
    PROMPT='%F{240}[${CONTAINER_ID}]%f %(?.%F{green}√.%F{red}?%?)%f %B%F{240}%1~%f%b $ '
  else
    PROMPT='%(?.%F{green}√.%F{red}?%?)%f %B%F{240}%1~%f%b $ '
  fi
}

typeset -a precmd_fuctions
precmd_functions=(set_prompt)

autoload -U compinit; compinit # completion

# history
mkdir -p ~/.cache/shell
export HISTFILE=~/.cache/shell/shell_history
export HISTSIZE=1000000   # the number of items for the internal history list
export SAVEHIST=1000000   # maximum number of items for the history file
setopt HIST_IGNORE_ALL_DUPS  # do not put duplicated command into history list
setopt HIST_SAVE_NO_DUPS  # do not save duplicated command
setopt HIST_REDUCE_BLANKS  # remove unnecessary blanks
setopt INC_APPEND_HISTORY_TIME  # append command to history file immediately after execution
setopt EXTENDED_HISTORY  # record command start time

# zsh plugins
# couldn't find the first one in fedora packages
#. /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh

if [ -f /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh ]
then
   . /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh
else
  . /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

if [ -f /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh  ]
then
  . /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh
else
  . /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# direnv
_direnv_hook() {
  trap -- '' SIGINT;
  eval "$("direnv" export zsh)";
  trap - SIGINT;
}
typeset -ag precmd_functions;
if [[ -z "${precmd_functions[(r)_direnv_hook]+1}" ]]; then
  precmd_functions=( _direnv_hook ${precmd_functions[@]} )
fi
typeset -ag chpwd_functions;
if [[ -z "${chpwd_functions[(r)_direnv_hook]+1}" ]]; then
  chpwd_functions=( _direnv_hook ${chpwd_functions[@]} )
fi

# The next line updates PATH for the Google Cloud SDK.
# TODO I can probably get these from the AUR package instead?
if [ -f '/home/adam/10-19.Software/14.Open-Source/google-cloud-sdk/google-cloud-sdk/path.zsh.inc' ]; then . '/home/adam/10-19.Software/14.Open-Source/google-cloud-sdk/google-cloud-sdk/path.zsh.inc'; fi
if [ -f '/home/adam/10-19.Software/14.Open-Source/google-cloud-sdk/google-cloud-sdk/completion.zsh.inc' ]; then . '/home/adam/10-19.Software/14.Open-Source/google-cloud-sdk/google-cloud-sdk/completion.zsh.inc'; fi

# babashka
#_bb_tasks() {
#    local matches=(`bb tasks |tail -n +3 |cut -f1 -d ' '`)
#    compadd -a matches
#    _files # autocomplete filenames as well
#}
#compdef _bb_tasks bb

# fasd
# below is expanded of eval "$(fasd --init posix-alias zsh-hook zsh-ccomp zsh-ccomp-install)"

alias a='fasd -a'
alias s='fasd -si'
alias sd='fasd -sid'
alias sf='fasd -sif'
alias d='fasd -d'
alias f='fasd -f'
# function to execute built-in cd
fasd_cd() {
  if [ $# -le 1 ]; then
    fasd "$@"
  else
    local _fasd_ret="$(fasd -e 'printf %s' "$@")"
    [ -z "$_fasd_ret" ] && return 1
    [ -d "$_fasd_ret" ] && cd "$_fasd_ret" || printf '%s\n' "$_fasd_ret"
  fi
}
alias z='fasd_cd -d'
alias zz='fasd_cd -d -i'

# add zsh hook
_fasd_preexec() {
  { fasd --proc $(fasd --sanitize "$2") } >> "/dev/null" 2>&1
}
autoload -Uz add-zsh-hook
add-zsh-hook preexec _fasd_preexec

# zsh command mode completion
_fasd_zsh_cmd_complete() {
  local compl
  read -c compl
  (( $+compstate )) && compstate[insert]=menu # no expand if compsys loaded
  reply=(${(f)"$(fasd --complete "$compl")"})
}

# enable command mode completion
compctl -U -K _fasd_zsh_cmd_complete -V fasd -x 'C[-1,-*e],s[-]n[1,e]' -c - \
  'c[-1,-A][-1,-D]' -f -- fasd fasd_cd

# fzf - fuzzy find for history, etc
if [ -f ~/.local/share/fzf/completion.zsh ]; then source ~/.local/share/fzf/completion.zsh; fi
if [ -f /usr/share/fzf/completion.zsh ]; then source /usr/share/fzf/completion.zsh; fi
if [ -f ~/.local/share/fzf/key-bindings.zsh ]; then source ~/.local/share/fzf/key-bindings.zsh; fi
if [ -f /usr/share/fzf/key-bindings.zsh ]; then source /usr/share/fzf/key-bindings.zsh; fi

